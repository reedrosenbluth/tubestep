{"version":3,"file":"static/webpack/static/development/pages/index.js.155d5cbe26f986dfd58f.hot-update.js","sources":["webpack:///./components/Sequence.js"],"sourcesContent":["import Track from \"../components/Track\";\n\nclass Sequence extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 1,\n      tempo: 120,\n      clockOn: false,\n      sequence: [\n        [false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false]\n      ]\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.stepID);\n  }\n\n  step() {\n    const prev = this.state.step;\n    const next = prev == 8 ? 1 : prev + 1;\n    this.setState({\n      step: next\n    });\n  }\n\n  toggleCell(x) {\n    return y => {\n      let sequence = this.state.sequence;\n      sequence[x][y] = !sequence[x][y];\n      this.setState({\n        sequence: sequence\n      });\n    };\n  }\n\n  toggleClock() {\n    if (this.state.clockOn) {\n      clearInterval(this.stepID);\n      this.setState({\n        clockOn: false\n      });\n    } else {\n      this.stepID = setInterval(\n        () => this.step(),\n        ((1 / (this.state.tempo / 60)) * 1000) / 2\n      );\n      this.setState({\n        clockOn: true\n      });\n    }\n  }\n\n  changeTempo(e) {\n    this.setState({\n      tempo: parseInt(e.target.value)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"columns\">\n          <div className=\"column is-1\">\n            <button className=\"button\" onClick={() => this.toggleClock()}>\n              start/stop\n            </button>\n          </div>\n          <div className=\"column is-1\">\n            <input\n              class=\"input\"\n              type=\"text\"\n              value={this.state.tempo}\n              onChange={e => this.changeTempo(e)}\n            />\n          </div>\n        </div>\n        {this.state.sequence.map((track, i) => {\n          return (\n            <Track\n              key={i}\n              step={this.state.step}\n              toggle={this.toggleCell(i)}\n              sequence={track}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Sequence;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAaA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;;;;AA3FA;AACA;AA6FA;;;;A","sourceRoot":""}